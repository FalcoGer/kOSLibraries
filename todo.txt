misc scripts:

- restore events after reboot
    save events to file
    restore file
    have event names and function names in an lexicon.

aircraft:
- fly to waypoint
- autoland:
    PID throttle for AoA keeping
    PID pitch for glide slope keeping (3Â°, VVI should point at landing point)
    PID roll for 0 roll keeping
    PID yaw for heading keeping to touchdown
    check bounding box for ground contact
    throttle 0, use yaw PID to keep runway heading, full brakes, unlock pitch
- auto T/O
    set throttle to 1
    PID roll for 0 roll keeping
    PID yaw for centerline keeping
    PID pitch at T/O speed for 3Â° up
- set altitude       (pid -> pitch (limit AoA, limit pitchup))
- set heading        (pid -> roll (limit roll angle))
- set speed          (pid -> (lots of) negative means speed brakes?)
- set vertical speed (PID -> pitch (limit AoA, limit pitchup))
- SSTO?
FUNCTION current_mach_number {
	LOCAL currentPresure IS BODY:ATM:ALTITUDEPRESSURE(SHIP:ALTITUDE).
	RETURN CHOOSE SQRT(2 / BODY:ATM:ADIABATICINDEX * SHIP:Q / currentPresure) IF currentPresure > 0 ELSE 0.
}

maneuver scripts:
orbital:
- change AP/PA
- efficient inclination change with circularization or returning to original orbit
- orbital period change
- do contract orbit (enter arguments from contracts)
    use lambert solver -> intercept target?
- calculate time for fixed dV maneuver with staging
- go to child body, possibly with inclination and pereapsis height

body:
- landing:
    follow slopes to avoid too steep a landing spot (use hover pid, tilt ship in direction of slope * desired speed - current horizontalVel)
    landing w/ coordinates
      1. find out how much the landing spot moves in one half orbit from current altitude to landing altitude (say 1000m above surface)
      2. burn retrograde to bring PE down over landing lattitude in longitude 0Â°
      3. 1/4 orbit from PE bring srfvelocity in line with vector to target (horizontal component only)
      4. calculate time to "impact" to the landing position, suicide burn horizontal velocity off just above the target facing retrograde
      5. normal landing with hvel near 0, maybe tilt ship during descend to make horizontal velocity point at the landing spot.
      
      0. make orbit equatorial (orbital plane perpendicular to north vector)
      1. find out how much the landing spot moves in half an orbit
      2. 90Â° from landing spot future position incline orbit to latitude
      3. as latitude is highest/lowest it should be right on top of the landing site, kill hvel
      4. drop to landing site, suicide burn with nose pointing towards the landing site - current hvel
      5. hover descend with nose pointing towards landing site

TheGreatFez ðŸš€ â€” Today at 00:53
Well, the way that I did it, was that I worked out a system where I would select where I wanted to land, then I would work out the inclination to be equal to the latitude.

From there, I would create a node to change my inclination to match that, then 90degrees after that maneuver node position (on the new orbit) I would create another node to do a hohmann transfer to drop my altitude
From there, I would use a solver to determine when the first node needs to be so that after it executes both nodes and reaches the periapsis, it will cross over the target position exactly as it passes the periapsis

- time to suicide burn (use fixed dv maneuver time, calculate speed at different heights, equate, solve for height)
- time to impact: d = v0 * t + (a*t^2)/2, solve for t: t = (SQRT(v^2 + 2*g*d) - v) / g     ; where v = initial velocity, g = surface gravity, d = distance to surface.

target:


notes:
SMA: Semi Major Axis: Average distance PA and AP from center of body (not sea level), determines orbital period
for transfers and orbit changes, make sure to avoid body encounters
for hill climbing or genetic algorithm aproaches make sure to not crash into a body.
for hill climbing with gravity assist, add maneuver after SOI change back to parent body with 4DOF (time, pro, rad, norm)
hill climbing for maneuvers can be done with CREATEORBIT(pos, vel, body, ut), so nodes need not be created.
  this will however not calculate SOI changes.
